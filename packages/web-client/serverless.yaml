service: meal-planner-web-client

provider:
  name: aws
  region: eu-central-1
  stage: dev
  tags:
    application: 'meal-planner'
    owner: 'serverless'
  stackTags:
    application: 'meal-planner'
    owner: 'serverless'
  deploymentBucket:
    blockPublicAccess: true
    tags:
      application: 'meal-planner'
      owner: 'serverless'

custom:
  webClientBucketName: meal-planner-web-client
  domainName: meal-planner.isnan.eu
  hostedZoneId: ZWC66FN0XU6P9
  certificateArn: arn:aws:acm:us-east-1:671123374425:certificate/1ccf3bea-dd45-4635-a9f4-af4308b40463 # must be an us-east-1 certificate for cloudfront

resources:
  Resources:
    WebClientBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.webClientBucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        Tags:
          - Key: application
            Value: meal-planner
          - Key: owner
            Value: serverless
    OriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Name: meal-planner-oai
          Description: OAC for meal planner distribution
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4
    Distribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CloudFront Distribution for meal planner
          IPV6Enabled: true
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_100
          DefaultRootObject: index.html
          Aliases:
            - ${self:custom.domainName}
          ViewerCertificate:
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
            AcmCertificateArn: ${self:custom.certificateArn}
          CustomErrorResponses:
            - ErrorCachingMinTTL: 300
              ErrorCode: 400
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCachingMinTTL: 300
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCachingMinTTL: 300
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          Origins:
            - Id: web-client
              DomainName: !GetAtt WebClientBucket.RegionalDomainName
              OriginAccessControlId: !GetAtt OriginAccessControl.Id
              S3OriginConfig:
                OriginAccessIdentity: ''
          DefaultCacheBehavior:
            TargetOriginId: web-client
            # Enable / Disable during development phase
            # CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # (CachingOptimized) see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # (CachingDisabled) see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # (Managed-CORS-S3Origin) see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html#managed-origin-request-policies-list
            ViewerProtocolPolicy: 'redirect-to-https'
            Compress: true
            AllowedMethods:
              - GET
              - HEAD
    WebClientBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebClientBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - Fn::Join:
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref WebClientBucket
                      - '/*'
              Principal:
                Service: 'cloudfront.amazonaws.com'
              Condition:
                StringEquals:
                  'AWS:SourceArn':
                    - Fn::Join:
                        - ''
                        - - 'arn:aws:cloudfront::'
                          - Ref: 'AWS::AccountId'
                          - ':distribution/'
                          - Ref: Distribution
    RecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${self:custom.hostedZoneId}
        RecordSets:
          - Name: ${self:custom.domainName}
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2 # Built-in value for Cloudfront
              DNSName: !GetAtt Distribution.DomainName
          - Name: ${self:custom.domainName}
            Type: AAAA
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2 # Built-in value for Cloudfront
              DNSName: !GetAtt Distribution.DomainName

  Outputs:
    BucketName:
      Value: ${self:custom.webClientBucketName}
      Export:
        Name: mealPlannerWebClientBucketName
